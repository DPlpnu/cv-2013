# -*- coding: utf-8 -*-
"""Lab2 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J6ndfcoFN_sMwKTUdaOvO16p4N_NQHMN
"""

!pip3 install opencv-contrib-python==4.4.0.46

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt

def describe(path, newPath, applyRotation=False):
  img = cv.imread(path)

  if applyRotation:
    img = cv.rotate(img, cv.ROTATE_90_CLOCKWISE)

  gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
  sift = cv.xfeatures2d.SIFT_create()
  kp = sift.detect(gray, None)
  kp, des = sift.detectAndCompute(gray,None) 
  img = cv.drawKeypoints(gray, kp, img, flags=cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
  cv.imwrite(newPath, img)
  return (img, kp, des)

original, kp, des = describe("/content/high_detailed_lab2.jpg", '/content/high_detailed_with_kp_lab2.jpg')
partial, kp1, des1 = describe("/content/tree-lab2.jpg", '/content/tree-lab2-with-kp.jpg', True)

print(des.shape)



def validate(imgCustom, imgBuiltIn):
  fig, axes = plt.subplots(1, 2, figsize=(50,50))

  axes[0].imshow(imgCustom, cmap='gray')
  axes[0].set_title('Custom mathcer')

  axes[1].imshow(imgBuiltIn, cmap='gray')
  axes[1].set_title('OpenCV matcher')

  fig.set_figwidth(50)
  fig.set_figheight(30)

  plt.show()

def customMatcher(des, des1):
  matches = []

  for i, p1 in enumerate(des):
    j_min = -1
    min = 10**100
    for j, p2 in enumerate(des1):
      dist = np.sqrt(sum((np.array(p1) - np.array(p2)) **2))
      if dist < min: 
        min = dist
        j_min = j
    matches.append(
        cv.DMatch(_imgIdx=0, _queryIdx=i, _trainIdx=j_min, _distance=min)
    ) 
  return matches

bf = cv.BFMatcher()
matches = bf.match(des,des1)
imgBuiltIn=cv.drawMatches(original, kp, partial, kp1, matches[:20],None, flags=cv.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS)

matches = customMatcher(des, des1)
imgCustom=cv.drawMatches(original, kp, partial, kp1, matches[:20],None, flags=cv.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS)

validate(imgCustom,imgBuiltIn)
